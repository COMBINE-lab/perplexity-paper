from os.path import join

### Quantify
EXP_NAME = config['exp-name']
OUTPUT_DIR = join('output', EXP_NAME)
READS_DIR = config['reads-dir']
SAMPLES_NAMES = config['sample-names']

TX_PATH = config['tx-path']
TX_INDEX = config.get('index_path', join(OUTPUT_DIR, '{}_index'.format(EXP_NAME)))

QUANTS_DIR = join(OUTPUT_DIR, 'quants')

READ_FMT = config.get('read_file_fmt', 'fastq.gz')

reads_1_fmt = join(READS_DIR, '{sample_name}', 'train', '{k}', 'sample_01_1_1.'+READ_FMT)
reads_2_fmt = join(READS_DIR, '{sample_name}',  'train', '{k}', 'sample_01_2_2.'+READ_FMT)

test_reads_1_fmt = join(READS_DIR, '{sample_name}', 'test', '{k}', 'sample_01_1_1.'+READ_FMT)
test_reads_2_fmt = join(READS_DIR, '{sample_name}',  'test', '{k}', 'sample_01_2_2.'+READ_FMT)

quant_dir_fmt = join(QUANTS_DIR, '{sample_name}','vbprior={vbprior}','{k}')
eq_classes_gz_fmt = join(quant_dir_fmt, 'aux_info', 'eq_classes.txt.gz')
quant_file_fmt = join(quant_dir_fmt, 'quant.sf')

test_ecs_dir_fmt = join(OUTPUT_DIR, 'test-ecs', '{sample_name}', '{k}')
test_ecs_fmt = join(test_ecs_dir_fmt, 'aux_info', 'eq_classes.txt.gz')

perplexity_dir = join(OUTPUT_DIR, 'eval', 'perplexity')
perplexity_fmt = join(perplexity_dir, '{sample_name}', 'vbprior={vbprior}', '{k}', 'perplexity.yml')

# perplexity_vary_dir = join(OUTPUT_DIR, 'perplexity_vary')
# perplexity_vary_fmt = join(perplexity_vary_dir, '{sample_name}', 'vbprior={vbprior}',
#                      'alpha={alpha}', '{k}', 'perplexity_vary.yml')

# perplexity_tpm_dir = join(OUTPUT_DIR, 'perplexity_tpm')
# perplexity_tpm_fmt = join(perplexity_tpm_dir, '{sample_name}', 'vbprior={vbprior}',
#                      'beta={beta}', '{k}', 'perplexity_tpm.yml')

# vs_ground_truth_fmt = join(perplexity_dir, '{sample_name}', 'vbprior={vbprior}', '{k}', 'vs_gt_metrics.tsv')

# GROUND_TRUTH_DIR = config['ground-truth-dir']
# ground_truth_quants = join(GROUND_TRUTH_DIR, '{sample_name}', 'quant.sf')

N_folds = config['k']
PRIOR_WEIGHTS = config['prior-weights']

# NOTE: Snakefile expects perplexity binary to be in specified path
PERPLEXITY = '../../perplexity/target/release/perplexity'

# NOTE: Snakefile expects salmon binary that propagates vbem prior parameter to 
#       gibbs sampler to be in the specified path
SALMON = '/fs/cbcb-lab/rob/software-dev/salmon/bin/salmon'

_FOLDS = range(1, N_folds+1)

#TODO...
rule quant:
    input:
        expand(eq_classes_gz_fmt, sample_name=SAMPLES_NAMES, vbprior=PRIOR_WEIGHTS, k=_FOLDS),
        expand(quant_file_fmt, sample_name=SAMPLES_NAMES, vbprior=PRIOR_WEIGHTS, k=_FOLDS),

rule test_ecs:
    input:
        expand(test_ecs_fmt,sample_name=SAMPLES_NAMES, k=_FOLDS)


##########################################################################################################

de_output_fmt = join(OUTPUT_DIR, 'de', 'vbprior={vbprior}', 'k={k}_swish_results.tsv')

rule de:
    input:
        expand(de_output_fmt, vbprior=PRIOR_WEIGHTS, k=_FOLDS)

rule _de:
    input:
        A = lambda w: expand(quant_file_fmt, 
                            sample_name=config.get('A'),
                            vbprior=w.vbprior,
                            k=w.k),
        B =lambda w: expand(quant_file_fmt, 
                            sample_name=config.get('B'),
                            vbprior=w.vbprior,
                            k=w.k)
    output:
        de_output_fmt
    shell:
        '''
        Rscript swish_DE.R \
            -A {input.A} \
            -B {input.B} \
            --A_cond A \
            --B_cond B \
            -o {output}
        '''


############ PERPLEXITY ############################################################

BETAS = config.get('betas', ['1e-8'])
perplexity_dir = join(OUTPUT_DIR, 'perplexity')
perplexity_fmt = join(perplexity_dir, '{sample_name}', 'vbprior={vbprior}',
                     'beta={beta}', '{k}', 'perplexity.yml')

rule perplexity:
    input:
        expand(perplexity_fmt, sample_name=SAMPLES_NAMES, vbprior=PRIOR_WEIGHTS, k=_FOLDS, beta=BETAS),


rule _perplexity:
    input:
        train_quant = quant_file_fmt,
        train_ecs = eq_classes_gz_fmt,
        test_ecs = test_ecs_fmt
    output:
        perplexity_fmt,
    shell:
        '''
        {PERPLEXITY} eval \
            --output {output} \
            --train_ecs {input.train_ecs} \
            --quants {input.train_quant} \
            --test_ecs {input.test_ecs} \
            --smoothing {wildcards.beta}
        '''

##########################################################################################################
        
###
# SALMON params
# `--dumpEqWeights` to dump equivalence class file
# `--rangeFactorizationBins 1` to use traditional rich eq classes
rule _quant:
    input:
        mate1=reads_1_fmt,
        mate2=reads_2_fmt,
        index=TX_INDEX
    output:
        # Snakemake does not like if an output directory is the parent of another output 
        #outdir = directory(quant_dir_fmt),
        eq_classes_gz=eq_classes_gz_fmt,
        quants=quant_file_fmt
    params:
        cores = config.get('salmon_cores', 8),
        outdir = directory(quant_dir_fmt), # sidestepping possible snakemake issue
        range_fac = '' if config.get('range_fac', True) \
                       else '--rangeFactorizationBins 1'
    shell:
        '''
        {SALMON} quant -i {input.index} -l A \
            -1 {input.mate1} \
            -2 {input.mate2} \
            -o {params.outdir} \
            {params.range_fac} \
            -p {params.cores} \
            --vbPrior {wildcards.vbprior} \
            --validateMappings \
            --dumpEqWeights \
            --numGibbsSamples 20
        '''

rule _test_ecs:
    input:
        mate1=test_reads_1_fmt,
        mate2=test_reads_2_fmt,
        index=TX_INDEX
    output:
        ecs=test_ecs_fmt,
    params:
        cores = config.get('salmon_cores', 8),
        outdir = directory(test_ecs_dir_fmt), # sidestepping snakemake outputs
    shell:
        '''
        {SALMON} quant -i {input.index} -l A \
            -1 {input.mate1} \
            -2 {input.mate2} \
            -o {params.outdir} \
            -p {params.cores} \
            --validateMappings \
            --skipQuant \
            --dumpEqWeights
        '''

rule index:
    input:
        TX_PATH
    output:
        directory(TX_INDEX)
    shell:
        '''
        {SALMON} index -t {input} -i {output}
        '''
